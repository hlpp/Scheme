(define (iterative-improve good-enough? improve)
  (define (iter guess)
    (let ((next (improve guess)))
      (if (good-enough? guess next)
          next
        (iter next))))
  (lambda (first-guess) (iter first-guess)))

(define (square x) (* x x))
(define (abs x) (x))
(define (sqrt. x)
  (define (good-enough? guess next)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (/ (+ guess (/ x guess)) 2))
  ((iterative-improve good-enough? improve) 1.0))
(sqrt. 9)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 0.00001))
  (define (improve guess)
    (f guess))
  ((iterative-improve close-enough? improve) first-guess))
(fixed-point cos 1.0)